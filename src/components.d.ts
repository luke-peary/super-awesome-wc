/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SaButton {
        "disabled": boolean;
        "type": string;
        "variant": 'primary' | 'secondary';
    }
    interface SaContainer {
        "variant": 'fixed' | 'fluid';
    }
    interface SaCopy {
        "as": 'span' | 'p';
        "variant": 'small' | 'medium' | 'large';
    }
    interface SaGrid {
        "gutter": boolean;
        "verticalGutter": boolean;
    }
    interface SaGridItem {
        "pull": number;
        "push": number;
        "width": boolean;
    }
    interface SaHeading {
        "as": 'h1' | 'h2';
        "variant": 'small' | 'medium' | 'large' | 'title';
    }
    interface SaImage {
        "src": string;
    }
    interface SaProductTile {
        "img": string;
        "name": string;
    }
    interface SaTextInput {
        "disabled": boolean;
        "type": 'text' | 'email';
        "value": string;
    }
    interface TwgOffCanvas {
        "close": () => Promise<void>;
        "heading": string;
        "isOpen": boolean;
        "open": () => Promise<void>;
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSaButtonElement extends Components.SaButton, HTMLStencilElement {
    }
    var HTMLSaButtonElement: {
        prototype: HTMLSaButtonElement;
        new (): HTMLSaButtonElement;
    };
    interface HTMLSaContainerElement extends Components.SaContainer, HTMLStencilElement {
    }
    var HTMLSaContainerElement: {
        prototype: HTMLSaContainerElement;
        new (): HTMLSaContainerElement;
    };
    interface HTMLSaCopyElement extends Components.SaCopy, HTMLStencilElement {
    }
    var HTMLSaCopyElement: {
        prototype: HTMLSaCopyElement;
        new (): HTMLSaCopyElement;
    };
    interface HTMLSaGridElement extends Components.SaGrid, HTMLStencilElement {
    }
    var HTMLSaGridElement: {
        prototype: HTMLSaGridElement;
        new (): HTMLSaGridElement;
    };
    interface HTMLSaGridItemElement extends Components.SaGridItem, HTMLStencilElement {
    }
    var HTMLSaGridItemElement: {
        prototype: HTMLSaGridItemElement;
        new (): HTMLSaGridItemElement;
    };
    interface HTMLSaHeadingElement extends Components.SaHeading, HTMLStencilElement {
    }
    var HTMLSaHeadingElement: {
        prototype: HTMLSaHeadingElement;
        new (): HTMLSaHeadingElement;
    };
    interface HTMLSaImageElement extends Components.SaImage, HTMLStencilElement {
    }
    var HTMLSaImageElement: {
        prototype: HTMLSaImageElement;
        new (): HTMLSaImageElement;
    };
    interface HTMLSaProductTileElement extends Components.SaProductTile, HTMLStencilElement {
    }
    var HTMLSaProductTileElement: {
        prototype: HTMLSaProductTileElement;
        new (): HTMLSaProductTileElement;
    };
    interface HTMLSaTextInputElement extends Components.SaTextInput, HTMLStencilElement {
    }
    var HTMLSaTextInputElement: {
        prototype: HTMLSaTextInputElement;
        new (): HTMLSaTextInputElement;
    };
    interface HTMLTwgOffCanvasElement extends Components.TwgOffCanvas, HTMLStencilElement {
    }
    var HTMLTwgOffCanvasElement: {
        prototype: HTMLTwgOffCanvasElement;
        new (): HTMLTwgOffCanvasElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sa-button": HTMLSaButtonElement;
        "sa-container": HTMLSaContainerElement;
        "sa-copy": HTMLSaCopyElement;
        "sa-grid": HTMLSaGridElement;
        "sa-grid-item": HTMLSaGridItemElement;
        "sa-heading": HTMLSaHeadingElement;
        "sa-image": HTMLSaImageElement;
        "sa-product-tile": HTMLSaProductTileElement;
        "sa-text-input": HTMLSaTextInputElement;
        "twg-off-canvas": HTMLTwgOffCanvasElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SaButton {
        "disabled"?: boolean;
        "type"?: string;
        "variant"?: 'primary' | 'secondary';
    }
    interface SaContainer {
        "variant"?: 'fixed' | 'fluid';
    }
    interface SaCopy {
        "as"?: 'span' | 'p';
        "variant"?: 'small' | 'medium' | 'large';
    }
    interface SaGrid {
        "gutter"?: boolean;
        "verticalGutter"?: boolean;
    }
    interface SaGridItem {
        "pull"?: number;
        "push"?: number;
        "width"?: boolean;
    }
    interface SaHeading {
        "as"?: 'h1' | 'h2';
        "variant"?: 'small' | 'medium' | 'large' | 'title';
    }
    interface SaImage {
        "src"?: string;
    }
    interface SaProductTile {
        "img"?: string;
        "name"?: string;
    }
    interface SaTextInput {
        "disabled"?: boolean;
        "onSaInput"?: (event: CustomEvent<any>) => void;
        "type"?: 'text' | 'email';
        "value"?: string;
    }
    interface TwgOffCanvas {
        "heading"?: string;
        "isOpen"?: boolean;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sa-button": SaButton;
        "sa-container": SaContainer;
        "sa-copy": SaCopy;
        "sa-grid": SaGrid;
        "sa-grid-item": SaGridItem;
        "sa-heading": SaHeading;
        "sa-image": SaImage;
        "sa-product-tile": SaProductTile;
        "sa-text-input": SaTextInput;
        "twg-off-canvas": TwgOffCanvas;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sa-button": LocalJSX.SaButton & JSXBase.HTMLAttributes<HTMLSaButtonElement>;
            "sa-container": LocalJSX.SaContainer & JSXBase.HTMLAttributes<HTMLSaContainerElement>;
            "sa-copy": LocalJSX.SaCopy & JSXBase.HTMLAttributes<HTMLSaCopyElement>;
            "sa-grid": LocalJSX.SaGrid & JSXBase.HTMLAttributes<HTMLSaGridElement>;
            "sa-grid-item": LocalJSX.SaGridItem & JSXBase.HTMLAttributes<HTMLSaGridItemElement>;
            "sa-heading": LocalJSX.SaHeading & JSXBase.HTMLAttributes<HTMLSaHeadingElement>;
            "sa-image": LocalJSX.SaImage & JSXBase.HTMLAttributes<HTMLSaImageElement>;
            "sa-product-tile": LocalJSX.SaProductTile & JSXBase.HTMLAttributes<HTMLSaProductTileElement>;
            "sa-text-input": LocalJSX.SaTextInput & JSXBase.HTMLAttributes<HTMLSaTextInputElement>;
            "twg-off-canvas": LocalJSX.TwgOffCanvas & JSXBase.HTMLAttributes<HTMLTwgOffCanvasElement>;
        }
    }
}
